(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/andrew/Documents/Hack Reactor/vocalize/public/main.js":[function(require,module,exports){
 /*
React Component Hierarchy
  -VocalizeApp
    -Title
    -Instructions
    -PronunciationTest
      -TargetWord
      -PlayWordBtn
      -RecordAudioBtn
      -PercentCorrect
      -NextWordBtn
*/

var NextWordBtn = React.createClass({displayName: "NextWordBtn",

  render: function(){
    return (
      React.createElement("div", {className: "next"}, 
        React.createElement("button", {
          type: "button", 
          className: "btn btn-full", 
          onClick: this.props.onClick
        }, 
          "Next Word"
        )
      )
    );
  }
});

var PercentCorrect = React.createClass({displayName: "PercentCorrect",
  render: function(){
    return (
      React.createElement("div", null, 
        React.createElement("h2", null, "Score:"), 
        React.createElement("h2", {className: "score"}, 
          this.props.percentCorrect, "%"
        )
      )
    );
  }
});

var PlayWordBtn = React.createClass({displayName: "PlayWordBtn",

  render: function() {
    return ( 
      React.createElement("div", {className: "usr-options"}, 
        React.createElement("button", {type: "button", 
          className: "sound", 
          onClick: this.props.playWord
        }, 
          React.createElement("i", {className: "icon ion-volume-high"})
        )
      )
    );
  }
});

var RecordAudioBtn = React.createClass({displayName: "RecordAudioBtn",
  render: function() {
    return (
      React.createElement("div", {className: "usr-options"}, 
        React.createElement("button", {
          type: "button", 
          className: "microphone", 
          onMouseDown: this.props.startRecording, 
          onMouseUp: this.props.stopRecording
        }, 
          React.createElement("i", {className: "icon ion-mic-a"})
        )
      )    
    );
  }
});

var TargetWord = React.createClass({displayName: "TargetWord",
  render: function(){
    return (
      React.createElement("div", null, 
        React.createElement("h2", {className: "target-word"}, 
          this.props.targetWord
        )
      )
    );
  }
});
 
var PronunciationTest = React.createClass({displayName: "PronunciationTest",
  recordRTC: null,

  loadWordFromServer: function() {
    var url = this.compileNextWordUrl();

    $.ajax({
      url: url,
      dataType: 'json',
      success: function(data) {
        this.setState({targetWord: data.word, s3key: data.s3.Key});
      }.bind(this)
    });
  },

  compileNextWordUrl : function() {
    /*
      Example: /api/words/index/?language=english&gender=male
    */
    var language = 'language=' + this.state.language;
    var gender = 'gender=' + this.state.gender;
    var url = '/api/words/index/?' + language + '&' + gender;
    
    return url;
  },

  playWord: function() {
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    var context = new AudioContext();
    var s3key = this.state.s3key;

    function loadSound() {
      var request = new XMLHttpRequest();
      request.open("GET", "https://localhost:3000/api/audio/" + s3key, true);
      request.responseType = "arraybuffer";

      request.onload = function() {
        var Data = request.response;
        process(Data);
      };

      request.send();
    }

    function process(Data) {
      var source = context.createBufferSource(); // Create Sound Source
      context.decodeAudioData(Data, function(buffer) {
        source.buffer = buffer;
        source.connect(context.destination);
        source.start(context.currentTime);
        // Close audio context when file is done
        source.onended = function(){
          context.close();
        }
      });
    }

    loadSound();
  },

  requestUserAudioPermission: function() {
    var mediaConstraints = {
      audio: true,
      video: false
    };

    var successCallback = function (mediaStream) {
      var config = {
        type: 'audio',
        numberOfAudioChannels: 1
      };

      this.recordRTC = RecordRTC(mediaStream, config);
    };

    var errorCallback = function(err) {
      console.log(err);
    };

    // TODO: check for browser compatability with navigator.mediaDevices.getUserMedia()
    // navigator.getUserMedia is deprecated and should be avoided if possible
    navigator.getUserMedia(mediaConstraints, successCallback.bind(this), errorCallback);
  },

  startRecordingUserAudio: function() {
    this.recordRTC.startRecording();
  },

  stopRecordingUserAudio: function() {
    this.recordRTC.stopRecording(function(audioURL) {
      var soundBlob = this.recordRTC.blob;
      this.postAudioFile(soundBlob);
    }.bind(this));
  },
  postAudioFile: function(soundBlob) {
    var formData = new FormData();
    formData.append('userAudio', soundBlob);
    $.ajax({
      type: 'POST',
      url: '/api/audio/',
      data: formData,
      processData: false,
      contentType: 'audio/wav',
      success: function(data) {
        this.recordRTC.clearRecordedData();
        var percentCorrect = Math.floor(data);
        this.setState({
          percentCorrect: percentCorrect
        });
      }.bind(this),
      error: function(xhr, status, err) {
        console.error('/api/audio', status, err.toString());
      }.bind(this)
    });
  },

  postTargetWord: function() {
    $.ajax({
      type: 'POST',
      url: '/api/word/',
      data: {'word': this.state.targetWord},
      success: function(data) {
        alert(data);
      }.bind(this),
      error: function(xhr, status, err) {
        console.error('/api/word/', status, err.toString());
      }.bind(this)
    });  
  },

  getInitialState: function() {
    return {
      language: 'english',
      gender: 'male',
      targetWord: null,
      percentCorrect: null,
    };
  },

  componentDidMount: function() {
    this.loadWordFromServer();
    this.requestUserAudioPermission();
  },

  render: function(){
    return (
      React.createElement("div", null, 
        React.createElement(TargetWord, {targetWord: this.state.targetWord}), 
        React.createElement(PlayWordBtn, {playWord: this.playWord}), 
        React.createElement(RecordAudioBtn, {
          startRecording: this.startRecordingUserAudio, 
          stopRecording: this.stopRecordingUserAudio}
        ), 
        React.createElement(PercentCorrect, {percentCorrect: this.state.percentCorrect}), 
        React.createElement(NextWordBtn, {onClick: this.loadWordFromServer})
      )
    );
    }
  });

var Instructions = React.createClass({displayName: "Instructions",
  render: function(){
    return (
      React.createElement("div", null, 
        React.createElement("h3", null, 
          "Click and hold the microphone button, while pronouncing the word shown below"
        )
      )
    );
  }
});

var Title = React.createClass({displayName: "Title",
  render: function(){
    return (
      React.createElement("div", null, 
        React.createElement("h1", {className: "title"}, "Vocalize")
      )
    );
  }
});

var VocalizeApp = React.createClass({displayName: "VocalizeApp",
  render: function(){
    return (
      React.createElement("div", null, 
        React.createElement(Title, null), 
        React.createElement(Instructions, null), 
        React.createElement(PronunciationTest, null)
      )
    );
  }
});

ReactDOM.render(
  React.createElement(VocalizeApp, null), 
  document.getElementById('vocalizeApp')
);

},{}]},{},["/Users/andrew/Documents/Hack Reactor/vocalize/public/main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
